import Sx.AnotherTest;

module Sx.Test
{
	[TestAttribute][TestAttributeWithParam(1)][TestAttributesWithoutParam, TestAttributesWithParam(2)][TestAttributesWithParam(1), TestAttributesWithParam(2)]
	class Program
	{
		int _intField = 1;
		int value = 1;
		A _a;

		int IntProp { get; set; }
		
		constructor(int value)
		{
			_intField = value;
			
			var x = value[0];
			
			var y = _a || 1;
			
			var z = _a << 1;
			
			var w = 1 << 4;

			var m = new A();
			
			for(var i = 0; i < 10; i++)
			{
				
			}
		
			while(true)
			{
				
			}
			
			do
			{
			} while(true);
			
			for(;;)
			{
			}
		}
		
	}

	enum TestEnum
	{
		[Description("1")]
		One,
		Two = 2,
		Three = TestModuleLevelMethod(),
		Four = 1 << 4
	}
	
	string TestModuleLevelMethod()
	{
		if (true)
		{
		}
		else if (true)
		{
		}
		else
		{
		}
		
		return "This is a test!";
	}
}

module Sx.AnotherTest
{
	class A
	{
		int _value;
		
		int Value => _value;
		
		int Add(int a)
		{
			return _value + 2;
		}
		
		constructor(int value)
		{
			_value = value;
		}
	}
}

module Sx.SomeOtherTestModule
{	
	class B
	{
		constructor()
		{
		}
	}
}