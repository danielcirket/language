import System;

module System.Collections
{
	public class Stack<T>
	{
		private _items : Array<T>;
		private _size : int = 0;
		private _defaultCapactity : int = 4;

		public Count : int => _size;

		public Clear() -> Stack<T>
		{
			return new Stack<T>();
		}
		public Contains(item : T) -> bool
		{
			return _size != 0 && _items.LastIndexOf(item) != -1;
		}
		public Peek() -> T
		{
			const size = _size - 1;
		
			if (size < 1)
				throw new InvalidOperationException("Cannot pop item from an empty stack.");
		
			if (size >= _items.Length)
				throw new InvalidOperationException("Cannot pop item from an empty stack.");
		
			const item = _items[size];
		
			return item;
		}
		public Pop() -> T
		{
			const size = _size - 1;
		
			if (size < 1)
				throw new InvalidOperationException("Cannot pop item from an empty stack.");
		
			if (size >= _items.Length)
				throw new InvalidOperationException("Cannot pop item from an empty stack.");
		
			_size = size;
		
			const item = _items[size];
		
			return item;
		}
		public Push(item : T) -> Stack<T>
		{
			return new Stack<T>(_items.Add(item));
		}

		/*public constructor()
		{
			_items = new Array<T>();
		}
		public constructor(capacity : int)
		{
			_items = new Array<T>(capactiy);
		}
		public constructor(Iterable<T> collection)
		{
			
		}*/
	}
}
